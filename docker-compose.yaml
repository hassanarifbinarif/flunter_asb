version: '3.2'


services:
  flunter-frontend:
    container_name: "${PROJECT_NAME}_server_${ENV}"
    build:
      context: ./flunter/
      dockerfile: Dockerfile
    # command: bash -c 'python manage.py migrate && python manage.py runserver 0.0.0.0:8000'
    command: bash -c 'python manage.py migrate && gunicorn flunter.wsgi:application --bind 127.0.0.1:8000'
    volumes:
      - "./flunter/:/code"
    env_file:
      - .env
    ports:
      - $WEB_PORT:8000
    depends_on:
      - flunter-db
    networks:
      flunter_asb_network:
        ipv4_address: 172.20.0.20
    dns: 172.20.0.10
    

  flunter-db:
    container_name: "${PROJECT_NAME}_postgres_${ENV}"
    image: postgis/postgis:14-3.3
    volumes:
      - flunter-postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: "${FLUNTER_DB_NAME}"
      POSTGRES_USER: "${FLUNTER_DB_USER}"
      POSTGRES_PASSWORD: "${FLUNTER_DB_PASSWORD}"
    networks:
      - flunter_asb_network


  aisearchbot-server:
    container_name: "${ASB_PROJECT_NAME}_server_${ENV}"
    build:
      context: ./aisearchbot/
      dockerfile: Dockerfile
    command: bash -c 'python manage.py migrate && python manage.py runserver 0.0.0.0:8000'
    volumes:
      - "./aisearchbot/:/code"
    env_file:
      - .env
    ports:
      - $ASB_WEB_PORT:8000
    depends_on:
      - aisearchbot-db
    networks:
      flunter_asb_network:
          ipv4_address: 172.20.0.30
    dns: 172.20.0.10

  aisearchbot-db:
    container_name: "${ASB_PROJECT_NAME}_postgres_${ENV}"
    image: postgis/postgis:14-3.3
    volumes:
      - aisearchbot-postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: "${ASB_DB_NAME}"
      POSTGRES_USER: "${ASB_DB_USER}"
      POSTGRES_PASSWORD: "${ASB_DB_PASSWORD}"
    networks:
      - flunter_asb_network
    
  redis:
    container_name: "${ASB_PROJECT_NAME}_redis_${ENV}"
    image: redis:alpine
    networks:
      - flunter_asb_network
    volumes:
      - "./aisearchbot/:/code"

  celery:
    container_name: "${ASB_PROJECT_NAME}_celery_${ENV}"
    build:
      context: ./aisearchbot/
      dockerfile: Dockerfile
    command: celery -A aisearchbot worker --loglevel=info
    volumes:
      - "./aisearchbot/:/code"
    depends_on:
      - aisearchbot-db
      - aisearchbot-server
      - redis
    networks:
      - flunter_asb_network


  nginx:
    container_name: "flunter_asb_nginx_${ENV}"
    image: nginx:latest
    volumes:
      - "./flunter/:/code/flunter-frontend"
      - "./aisearchbot/:/code/aisearchbot-server"
      - "./nginx/nginx-$ENV.conf:/etc/nginx/conf.d/default.conf"
      - "/etc/letsencrypt/:/etc/letsencrypt/"
    ports:
      - $NGINX_PORT:80
      - 443:443
    depends_on:
      - flunter-frontend
      - aisearchbot-server
    restart: always
    links:
      - flunter-frontend:flunter-frontend
      - aisearchbot-server:aisearchbot-server
    networks:
      flunter_asb_network:
        ipv4_address: 172.20.0.40
    dns: 172.20.0.10


  dnsmasq:
    image: andyshinn/dnsmasq
    container_name: dnsmasq
    cap_add:
      - NET_ADMIN
    volumes:
      - ./dnsmasq.conf:/etc/dnsmasq.conf
    restart: always
    networks:
      flunter_asb_network:
        ipv4_address: 172.20.0.10


volumes:
  flunter-postgres-data:
  aisearchbot-postgres-data:


networks:
  flunter_asb_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
